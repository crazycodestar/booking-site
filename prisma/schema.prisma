generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bookings Booking[]
  score Int @default(10)
  role Role @relation(fields: [roleId], references: [id])
  roleId String
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Room {
  id String @id @default(cuid())
  roomNumber String @unique
  image String?
  seats Seat[]
}

model Seat {
  id String @id @default(cuid())
  name String @unique
  bookings Booking[]
  room Room @relation(fields: [roomId], references: [id])
  roomId String
}

model Booking {
  id String @id @default(cuid())
  code String
  entryTime DateTime
  exitTime DateTime
  seat Seat @relation(fields: [seatId], references: [id])
  seatId String
  customer User @relation(fields: [customerId], references: [id])
  customerId String
  status BookingStatus @relation(fields: [statusId], references: [id])
  statusId String
  createdAt  DateTime @default(now())
}

model BookingStatus {
  id String @id @default(cuid())
  status String @unique
  booking Booking[]
}

model Role {
  id String @id @default(cuid())
  role String @unique
  user User[]
}